// Generated by view binder compiler. Do not edit!
package com.example.mint.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.mint.R;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityCreateCategoriesBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button addExpenseButton;

  @NonNull
  public final Button addIncomeButton;

  @NonNull
  public final LinearLayout budgetButtons;

  @NonNull
  public final LinearLayout budgetCategoriesLl;

  @NonNull
  public final TextInputLayout budgetCategoriesTil;

  @NonNull
  public final TextView budgetCategoriesTv;

  @NonNull
  public final TextView createCategoriesText;

  @NonNull
  public final LinearLayout expenseButtons;

  @NonNull
  public final EditText expenseCategoriesEt;

  @NonNull
  public final LinearLayout expenseCategoriesLl;

  @NonNull
  public final TextInputLayout expenseCategoriesTil;

  @NonNull
  public final TextView expenseCategoriesTv;

  @NonNull
  public final EditText incomeCategoriesEt;

  @NonNull
  public final RelativeLayout main;

  @NonNull
  public final Button nextButton;

  @NonNull
  public final LinearLayout promptLl;

  @NonNull
  public final TextView promptTv;

  @NonNull
  public final View view;

  private ActivityCreateCategoriesBinding(@NonNull RelativeLayout rootView,
      @NonNull Button addExpenseButton, @NonNull Button addIncomeButton,
      @NonNull LinearLayout budgetButtons, @NonNull LinearLayout budgetCategoriesLl,
      @NonNull TextInputLayout budgetCategoriesTil, @NonNull TextView budgetCategoriesTv,
      @NonNull TextView createCategoriesText, @NonNull LinearLayout expenseButtons,
      @NonNull EditText expenseCategoriesEt, @NonNull LinearLayout expenseCategoriesLl,
      @NonNull TextInputLayout expenseCategoriesTil, @NonNull TextView expenseCategoriesTv,
      @NonNull EditText incomeCategoriesEt, @NonNull RelativeLayout main,
      @NonNull Button nextButton, @NonNull LinearLayout promptLl, @NonNull TextView promptTv,
      @NonNull View view) {
    this.rootView = rootView;
    this.addExpenseButton = addExpenseButton;
    this.addIncomeButton = addIncomeButton;
    this.budgetButtons = budgetButtons;
    this.budgetCategoriesLl = budgetCategoriesLl;
    this.budgetCategoriesTil = budgetCategoriesTil;
    this.budgetCategoriesTv = budgetCategoriesTv;
    this.createCategoriesText = createCategoriesText;
    this.expenseButtons = expenseButtons;
    this.expenseCategoriesEt = expenseCategoriesEt;
    this.expenseCategoriesLl = expenseCategoriesLl;
    this.expenseCategoriesTil = expenseCategoriesTil;
    this.expenseCategoriesTv = expenseCategoriesTv;
    this.incomeCategoriesEt = incomeCategoriesEt;
    this.main = main;
    this.nextButton = nextButton;
    this.promptLl = promptLl;
    this.promptTv = promptTv;
    this.view = view;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityCreateCategoriesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityCreateCategoriesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_create_categories, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityCreateCategoriesBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addExpenseButton;
      Button addExpenseButton = ViewBindings.findChildViewById(rootView, id);
      if (addExpenseButton == null) {
        break missingId;
      }

      id = R.id.addIncomeButton;
      Button addIncomeButton = ViewBindings.findChildViewById(rootView, id);
      if (addIncomeButton == null) {
        break missingId;
      }

      id = R.id.budgetButtons;
      LinearLayout budgetButtons = ViewBindings.findChildViewById(rootView, id);
      if (budgetButtons == null) {
        break missingId;
      }

      id = R.id.budgetCategoriesLl;
      LinearLayout budgetCategoriesLl = ViewBindings.findChildViewById(rootView, id);
      if (budgetCategoriesLl == null) {
        break missingId;
      }

      id = R.id.budgetCategoriesTil;
      TextInputLayout budgetCategoriesTil = ViewBindings.findChildViewById(rootView, id);
      if (budgetCategoriesTil == null) {
        break missingId;
      }

      id = R.id.budgetCategoriesTv;
      TextView budgetCategoriesTv = ViewBindings.findChildViewById(rootView, id);
      if (budgetCategoriesTv == null) {
        break missingId;
      }

      id = R.id.createCategoriesText;
      TextView createCategoriesText = ViewBindings.findChildViewById(rootView, id);
      if (createCategoriesText == null) {
        break missingId;
      }

      id = R.id.expenseButtons;
      LinearLayout expenseButtons = ViewBindings.findChildViewById(rootView, id);
      if (expenseButtons == null) {
        break missingId;
      }

      id = R.id.expenseCategoriesEt;
      EditText expenseCategoriesEt = ViewBindings.findChildViewById(rootView, id);
      if (expenseCategoriesEt == null) {
        break missingId;
      }

      id = R.id.expenseCategoriesLl;
      LinearLayout expenseCategoriesLl = ViewBindings.findChildViewById(rootView, id);
      if (expenseCategoriesLl == null) {
        break missingId;
      }

      id = R.id.expenseCategoriesTil;
      TextInputLayout expenseCategoriesTil = ViewBindings.findChildViewById(rootView, id);
      if (expenseCategoriesTil == null) {
        break missingId;
      }

      id = R.id.expenseCategoriesTv;
      TextView expenseCategoriesTv = ViewBindings.findChildViewById(rootView, id);
      if (expenseCategoriesTv == null) {
        break missingId;
      }

      id = R.id.incomeCategoriesEt;
      EditText incomeCategoriesEt = ViewBindings.findChildViewById(rootView, id);
      if (incomeCategoriesEt == null) {
        break missingId;
      }

      RelativeLayout main = (RelativeLayout) rootView;

      id = R.id.nextButton;
      Button nextButton = ViewBindings.findChildViewById(rootView, id);
      if (nextButton == null) {
        break missingId;
      }

      id = R.id.promptLl;
      LinearLayout promptLl = ViewBindings.findChildViewById(rootView, id);
      if (promptLl == null) {
        break missingId;
      }

      id = R.id.promptTv;
      TextView promptTv = ViewBindings.findChildViewById(rootView, id);
      if (promptTv == null) {
        break missingId;
      }

      id = R.id.view;
      View view = ViewBindings.findChildViewById(rootView, id);
      if (view == null) {
        break missingId;
      }

      return new ActivityCreateCategoriesBinding((RelativeLayout) rootView, addExpenseButton,
          addIncomeButton, budgetButtons, budgetCategoriesLl, budgetCategoriesTil,
          budgetCategoriesTv, createCategoriesText, expenseButtons, expenseCategoriesEt,
          expenseCategoriesLl, expenseCategoriesTil, expenseCategoriesTv, incomeCategoriesEt, main,
          nextButton, promptLl, promptTv, view);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
